using System;
using System.IO;
using System.Linq;
using System.Text;
using Nino.Shared;
using System.Reflection;
using System.Collections.Generic;

namespace Nino.Serialization
{
    /// <summary>
    /// Nino code generator
    /// </summary>
    public static class CodeGenerator
    {
        /// <summary>
        /// Generate serialization code file at Assets/ouputPath
        /// editor only method
        /// </summary>
        /// <param name="outputPath"></param>
        public static void GenerateSerializationCodeForAllTypePossible(string outputPath = "Nino/Generated")
        {
            //find all types
            var types = AppDomain.CurrentDomain.GetAssemblies().SelectMany(a => a.GetTypes()).ToList().FindAll(t =>
            {
                //find NinoSerializeAttribute
                NinoSerializeAttribute[] ns =
                    (NinoSerializeAttribute[])t.GetCustomAttributes(typeof(NinoSerializeAttribute), false);
                if (ns.Length == 0) return false;
                return true;
            }).ToList();
            //iterate
            foreach (var type in types)
            {
                //gen
                GenerateSerializationCode(type, outputPath);
            }
        }

        /// <summary>
        /// Generate serialization code file at Assets/ouputPath
        /// editor only method
        /// </summary>
        /// <param name="type"></param>
        /// <param name="outputPath"></param>
        public static void GenerateSerializationCode(Type type, string outputPath = "Nino/Generated")
        {
            //find NinoSerializeAttribute
            NinoSerializeAttribute[] ns =
                (NinoSerializeAttribute[])type.GetCustomAttributes(typeof(NinoSerializeAttribute), false);
            if (ns.Length == 0) return;
            if (ns[0].IncludeAll) return;

            //code template
            string template =
                @"/* this is generated by nino */
{namespace}
{start}
    public partial struct {type}
    {
        #region NINO_CODEGEN
        public void NinoWriteMembers(Nino.Serialization.Writer writer)
        {
{members}
        }

        public void NinoSetMembers(object[] data)
        {
{fields}
        }
        #endregion
    }
{end}";
            if (type.IsClass)
            {
                template = template.Replace("struct", "class");
            }

            //replace namespace
            if (!string.IsNullOrEmpty(type.Namespace))
            {
                template = template.Replace("{namespace}", $"namespace {type.Namespace}");
                template = template.Replace("{start}", "{");
                template = template.Replace("{end}", "}");
            }

            //class full name
            var classFullName =
                $"{type.GetFriendlyName()}";
            //replace full name
            template = template.Replace("{type}", classFullName);

            //find members
            TypeModel.TryGetModel(type, out var model);
            //invalid model
            if (model != null)
            {
                if (!model.valid)
                {
                    throw new InvalidOperationException("invalid model");
                }
            }

            //generate model
            if (model == null)
            {
                model = TypeModel.CreateModel(type);
            }

            Dictionary<ushort, MemberInfo> members = model.members;

            #region serialize

            //build params
            StringBuilder sb = new StringBuilder();
            var keys = members.Keys.OrderBy(k => k).ToList();
            foreach (var key in keys)
            {
                var mt = members[key] is FieldInfo fi ? fi.FieldType : ((PropertyInfo)members[key]).PropertyType;
                //not basic type
                if (!mt.IsEnum && !mt.IsPrimitive && mt != ConstMgr.BoolType && mt != ConstMgr.DecimalType && mt != ConstMgr.StringType)
                {
                    //not array
                    if (!mt.IsArray)
                    {
                        //not generic
                        if (!mt.IsGenericType)
                        {
                            sb.Append($"            writer.WriteCommonVal(typeof({BeautifulLongTypeName(mt)}), this.{members[key].Name});\n");
                        }
                        //not dict/list
                        else if (mt.GetGenericTypeDefinition() != ConstMgr.DictDefType &&
                                 mt.GetGenericTypeDefinition() != ConstMgr.ListDefType)
                        {
                            sb.Append($"            writer.WriteCommonVal(typeof({BeautifulLongTypeName(mt)}), this.{members[key].Name});\n");
                        }
                        //list/dict
                        else
                        {
                            //lst
                            if (mt.GetGenericTypeDefinition() == ConstMgr.ListDefType)
                            {
                                var elemType = mt.GenericTypeArguments[0];
                                //if nino serialize class => loop call method
                                ns = (NinoSerializeAttribute[])elemType.GetCustomAttributes(typeof(NinoSerializeAttribute), false);
                                var nino = ns.Length != 0 && !ns[0].IncludeAll;
                                if (nino)
                                {
                                    //write len
                                    sb.Append($"            writer.CompressAndWrite(this.{members[key].Name}.Count);\n");
                                    //write item
                                    sb.Append($"            foreach (var entry in this.{members[key].Name})\n");
                                    sb.Append("            {\n");
                                    sb.Append("                entry.NinoWriteMembers(writer);\n");
                                    sb.Append("            }\n");
                                }
                                else
                                {
                                    sb.Append($"            writer.Write(this.{members[key].Name});\n");
                                }
                            }
                            //dict
                            else
                            {
                                var args = mt.GetGenericArguments();
                                Type keyType = args[0];
                                Type valueType = args[1];
                                //if nino serialize class => loop call method
                                ns = (NinoSerializeAttribute[])keyType.GetCustomAttributes(typeof(NinoSerializeAttribute), false);
                                var isKeyNino = ns.Length != 0 && !ns[0].IncludeAll;
                                ns = (NinoSerializeAttribute[])valueType.GetCustomAttributes(typeof(NinoSerializeAttribute), false);
                                var isValNino = ns.Length != 0 && !ns[0].IncludeAll;
                                if (isKeyNino || isValNino)
                                {
                                    //write len
                                    sb.Append($"            writer.CompressAndWrite(this.{members[key].Name}.Count);\n");
                                    //write item
                                    sb.Append($"            foreach (var entry in this.{members[key].Name})\n");
                                    sb.Append("            {\n");
                                    //write key
                                    sb.Append(isKeyNino
                                        ? "                entry.Key.NinoWriteMembers(writer);\n"
                                        : $"                writer.WriteCommonVal(typeof({BeautifulLongTypeName(keyType)}), entry.Key);\n");
                                    //write value
                                    sb.Append(isValNino
                                        ? "                entry.Value.NinoWriteMembers(writer);\n"
                                        : $"                writer.WriteCommonVal(typeof({BeautifulLongTypeName(valueType)}), entry.Value);\n");
                                    sb.Append("            }\n");
                                }
                                else
                                {
                                    sb.Append($"            writer.Write(this.{members[key].Name});\n");
                                }
                            }
                        }
                    }
                    //array
                    else
                    {
                        var elemType = mt.GetElementType();
                        //if nino serialize class => loop call method
                        ns = (NinoSerializeAttribute[])elemType.GetCustomAttributes(typeof(NinoSerializeAttribute), false);
                        var nino = ns.Length != 0 && !ns[0].IncludeAll;
                        if (nino)
                        {
                            //write len
                            sb.Append($"            writer.CompressAndWrite(this.{members[key].Name}.Length);\n");
                            //write item
                            sb.Append($"            foreach (var entry in this.{members[key].Name})\n");
                            sb.Append("            {\n");
                            sb.Append("                entry.NinoWriteMembers(writer);\n");
                            sb.Append("            }\n");
                        }
                        else
                        {
                            sb.Append($"            writer.Write(this.{members[key].Name});\n");
                        }
                    }
                }
                else
                {
                    //not enum -> basic type
                    if (!mt.IsEnum)
                    {
                        switch (Type.GetTypeCode(mt))
                        {
                            case TypeCode.Int32:
                            case TypeCode.UInt32:
                            case TypeCode.Int64:
                            case TypeCode.UInt64:
                                //compress
                                sb.Append($"            writer.CompressAndWrite(this.{members[key].Name});\n");
                                break;
                            default:
                                //write
                                sb.Append($"            writer.Write(this.{members[key].Name});\n");
                                break;
                        }
                    }
                    //enum -> special method
                    else
                    {
                        sb.Append($"            writer.CompressAndWriteEnum(typeof({(Enum.GetUnderlyingType(mt).FullName)}), (ulong) this.{members[key].Name});\n");
                    }
                }
            }
            //remove comma at the end
            sb.Remove(sb.Length - 1, 1);

            //replace template members
            template = template.Replace("{members}", sb.ToString());

            #endregion

            #region deserialize

            sb.Clear();
            int index = 0;
            keys = members.Keys.OrderBy(k => k).ToList();
            foreach (var key in keys)
            {
                var mt = members[key] is FieldInfo fi ? fi.FieldType : ((PropertyInfo)members[key]).PropertyType;
                //int, long, uint, ulong需要考虑压缩
                if (mt == ConstMgr.IntType)
                {
                    sb.Append($"            this.{members[key].Name} = System.Convert.ToInt32(data[{index}]);\n");
                }
                else if (mt == ConstMgr.UIntType)
                {
                    sb.Append($"            this.{members[key].Name} = System.Convert.ToUInt32(data[{index}]);\n");
                }
                else if (mt == ConstMgr.LongType)
                {
                    sb.Append($"            this.{members[key].Name} = System.Convert.ToInt64(data[{index}]);\n");
                }
                else if (mt == ConstMgr.ULongType)
                {
                    sb.Append($"            this.{members[key].Name} = System.Convert.ToUInt64(data[{index}]);\n");
                }
                else
                {
                    sb.Append(
                        $"            this.{members[key].Name} = ({BeautifulLongTypeName(mt)})data[{index}];\n");
                }

                index++;
            }

            //remove comma at the end
            sb.Remove(sb.Length - 1, 1);

            //replace template fiedls
            template = template.Replace("{fields}", sb.ToString());

            #endregion

            //save path
            var output = Path.Combine(ConstMgr.AssetPath, outputPath);
            if (!Directory.Exists(output))
            {
                Directory.CreateDirectory(output);
            }

            //save file path
            output = Path.Combine(output,
                $"{type.Namespace}{(!string.IsNullOrEmpty(type.Namespace) ? "." : "")}{type.GetFriendlyName()}"
                    .Replace(".", "_").Replace(",", "_")
                    .Replace("<", "_").Replace(">", "_") +
                "_Serialize.cs");
            if (File.Exists(output))
            {
                File.Delete(output);
            }

            //save
            File.WriteAllText(output, template);

            Logger.D("Code Gen", $"saved {output}");
        }

        private static string BeautifulLongTypeName(this Type mt)
        {
            return $"{mt.Namespace}{(!string.IsNullOrEmpty(mt.Namespace) ? "." : "")}{mt.GetFriendlyName()}";
        }

        /// <summary>
        /// 获取类型名字
        /// </summary>
        /// <param name="type"></param>
        /// <returns></returns>
        private static string GetFriendlyName(this Type type)
        {
            string friendlyName = type.Name;
            if (type.IsGenericType)
            {
                int iBacktick = friendlyName.IndexOf('`');
                if (iBacktick > 0)
                {
                    friendlyName = friendlyName.Remove(iBacktick);
                }

                friendlyName += "<";
                Type[] typeParameters = type.GetGenericArguments();
                for (int i = 0; i < typeParameters.Length; ++i)
                {
                    string typeParamName =
                        $"{typeParameters[i].Namespace}{(!string.IsNullOrEmpty(typeParameters[i].Namespace) ? "." : "")}{GetFriendlyName(typeParameters[i])}";
                    friendlyName += (i == 0 ? typeParamName : "," + typeParamName);
                }

                friendlyName += ">";
            }

            return friendlyName;
        }
    }
}