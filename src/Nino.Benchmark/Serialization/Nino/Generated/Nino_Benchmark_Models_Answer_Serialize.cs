/* this is generated by nino */
namespace Nino.Benchmark.Models
{
    public partial class Answer
    {
        public static Answer.SerializationHelper NinoSerializationHelper = new Answer.SerializationHelper();
        public class SerializationHelper: Nino.Serialization.NinoWrapperBase<Answer>
        {
            #region NINO_CODEGEN
            public override void Serialize(Answer value, Nino.Serialization.Writer writer)
            {
                writer.CompressAndWrite(value.QuestionId);
                writer.CompressAndWrite(value.AnswerId);
                writer.Write(value.LockedDate);
                writer.Write(value.CreationDate);
                writer.Write(value.LastEditDate);
                writer.Write(value.LastActivityDate);
                writer.CompressAndWrite(value.Score);
                writer.Write(value.CommunityOwnedDate);
                writer.Write(value.IsAccepted);
                writer.Write(value.Body);
                writer.Write(value.Title);
                writer.CompressAndWrite(value.UpVoteCount);
                writer.CompressAndWrite(value.DownVoteCount);
                if(value.Comments != null)
                {
                    writer.CompressAndWrite(value.Comments.Count);
                    foreach (var entry in value.Comments)
                    {
                        Nino.Benchmark.Models.Comment.NinoSerializationHelper.Serialize(entry, writer);
                    }
                }
                else
                {
                    writer.CompressAndWrite(0);
                }
                writer.Write(value.Link);
                if(value.Tags != null)
                {
                    writer.CompressAndWrite(value.Tags.Count);
                    foreach (var entry in value.Tags)
                    {
                        writer.Write(entry);
                    }
                }
                else
                {
                    writer.CompressAndWrite(0);
                }
                writer.Write(value.Upvoted);
                writer.Write(value.Downvoted);
                writer.Write(value.Accepted);
                writer.CompressAndWrite(value.CommentCount);
                writer.Write(value.BodyMarkdown);
                writer.Write(value.ShareLink);
            }

            public override Answer Deserialize(Nino.Serialization.Reader reader)
            {
                Answer value = new Answer();
                value.QuestionId =  (System.Int32)reader.DecompressAndReadNumber();
                value.AnswerId =  (System.Int32)reader.DecompressAndReadNumber();
                value.LockedDate = reader.ReadDateTime();
                value.CreationDate = reader.ReadDateTime();
                value.LastEditDate = reader.ReadDateTime();
                value.LastActivityDate = reader.ReadDateTime();
                value.Score =  (System.Int32)reader.DecompressAndReadNumber();
                value.CommunityOwnedDate = reader.ReadDateTime();
                value.IsAccepted = reader.ReadBool();
                value.Body = reader.ReadString();
                value.Title = reader.ReadString();
                value.UpVoteCount =  (System.Int32)reader.DecompressAndReadNumber();
                value.DownVoteCount =  (System.Int32)reader.DecompressAndReadNumber();
                value.Comments = new System.Collections.Generic.List<Nino.Benchmark.Models.Comment>(reader.ReadLength());
                for(int i = 0, cnt = value.Comments.Capacity; i < cnt; i++)
                {
                    var value_Comments_i = Nino.Benchmark.Models.Comment.NinoSerializationHelper.Deserialize(reader);
                    value.Comments.Add(value_Comments_i);
                }
                value.Link = reader.ReadString();
                value.Tags = new System.Collections.Generic.List<System.String>(reader.ReadLength());
                for(int i = 0, cnt = value.Tags.Capacity; i < cnt; i++)
                {
                    var value_Tags_i = reader.ReadString();
                    value.Tags.Add(value_Tags_i);
                }
                value.Upvoted = reader.ReadBool();
                value.Downvoted = reader.ReadBool();
                value.Accepted = reader.ReadBool();
                value.CommentCount =  (System.Int32)reader.DecompressAndReadNumber();
                value.BodyMarkdown = reader.ReadString();
                value.ShareLink = reader.ReadString();
                return value;
            }
            #endregion
        }
    }
}